				    Тестовое задание
Разработать веб-сервис на базе Asp Net MVC, для имитации внесения платежей в банковские системы. Требуется реализовать все функции CRUD.
1)	Внесение данных выполнять посредством ajax запросов при нажатии на кнопку «Отправить». Если поле «Валюта» не заполнено – кнопка «Отправить» должна быть неактивна. Предусмотреть валидацию текстового поля с валютой, как на стороне клиента, так и на стороне сервера.
Перед отправкой требуется обязательно выбрать банк-получатель из выпадающего списка. Список банков в выпадающем списке необходимо получать со стороны сервера, при входе на страницу. Задать список банков требуется в виде перечисления enum.

Результатам операции Create – является суммирование активов банка по логике, присущей каждому банку отдельно (см. пункт 3). Если в банке было 200 у.е., а при нажатии на «Отправить» было указано 100 у.е. – результатом будет их сумма, т.е. 300 y.e. 
 
Операции update, delete и read требуется реализовать только в виде rest-api в этом же приложении. 
Update –на входе указать – «Банк» и «сумму», которую требуется установить. Если в банке хранилось 400 y.e., а было передано 200 – результатом будет замена активов указанного банка на 200.
Delete – указать название банка, при выполнении операции «обнулить» активы банка.
Read – вывести список активов всех банков в виде json.

2)	Разрешается использовать любую базу данных (MySql, Postgres и т.д.)
Данные в базе данных должны храниться в единственной таблице «banks_total» с 3 полями: id (задать в виде GUID), bank (банк, сопоставимый с перечислением enum на стороне сервера), total (сумма активов).
Запрещено использовать готовые ORM. Необходимо написать собственную обертку для запросов к базе данных в виде подключаемой .dll библиотеки.

3)	При внесении активов в банк – требуется, не прибегая к базе данных реализовать следующую логику:
При внесении активов для первого банка – умножать сумму на 3. Т.е. было введено в поле «валюта» значение 100 – внесено будет 300.

Для второго банка – вычитать 50%.
Для третьего – добавлять 50% и вычитать 100, результатом этой операции должно быть неотрицательное число, т.е. если в итоге операции вышло число «-30» - необходимо привести его к нулю.

Для всех остальных банков реализовать логику по умолчанию: вносить то число, которые было указано в поле «Валюта».

Разделение логики реализовать, прибегнув к паттерну «Strategy».
Написать Unit тест для данной логики.
	

